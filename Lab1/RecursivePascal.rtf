{\rtf1\ansi\ansicpg1252\cocoartf1504
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Bold;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 Menlo-Italic;\f4\fnil\fcharset0 Menlo-BoldItalic;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue109;\red82\green0\blue103;\red0\green0\blue254;
\red109\green109\blue109;\red15\green112\blue3;}
{\*\expandedcolortbl;\csgray\c100000;\csgenericrgb\c0\c0\c42745;\csgenericrgb\c32157\c0\c40392;\csgenericrgb\c0\c0\c99608;
\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c5882\c43922\c1176;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\

\f1\b \cf2 public class 
\f2\b0 \cf0 RecursivePascal 
\f1\b \cf2 extends 
\f2\b0 \cf0 ErrorPascal 
\f1\b \cf2 implements 
\f2\b0 \cf0 Pascal \{\
\
        
\f1\b \cf2 boolean \cf3 direction 
\f2\b0 \cf0 = 
\f1\b \cf2 false
\f2\b0 \cf0 ;\
        
\f1\b \cf2 int 
\f2\b0 \cf0 [][] 
\f1\b \cf3 array
\f2\b0 \cf0 ;\
        
\f1\b \cf2 boolean \cf3 first_printPascal
\f2\b0 \cf0 ;\
\
        
\f1\b \cf2 public void 
\f2\b0 \cf0 printPascal (
\f1\b \cf2 int 
\f2\b0 \cf0 n) \{\
            
\f1\b \cf2 if
\f2\b0 \cf0 (sanity_check(n)) \{\
\
                
\f1\b \cf2 if 
\f2\b0 \cf0 (
\f1\b \cf3 first_printPascal
\f2\b0 \cf0 ) \{\
                
\f1\b \cf3 array 
\f2\b0 \cf0 = 
\f1\b \cf2 new int
\f2\b0 \cf0 [n][n];\
                
\f1\b \cf3 first_printPascal 
\f2\b0 \cf0 = 
\f1\b \cf2 false
\f2\b0 \cf0 ;\
\
                \}\
                
\f1\b \cf2 if 
\f2\b0 \cf0 (n != \cf4 0\cf0 ) \{\
\
                    
\f1\b \cf2 if 
\f2\b0 \cf0 (
\f1\b \cf3 direction
\f2\b0 \cf0 ) \{\
                        printPascal(n - \cf4 1\cf0 );\
                    \}\
                    
\f3\i \cf5 //by keep calling the printPascal function the algorithm will go through all of the numbers\
                    //and then when n = 0 it will jump out one step and write out the numbers in the order of the stack\
                    //which is by now in descending order.\
\
\
                    
\f1\i0\b \cf2 for 
\f2\b0 \cf0 (
\f1\b \cf2 int 
\f2\b0 \cf0 i = \cf4 0\cf0 ; i < n; i++) \{\
                        System.
\f4\i\b \cf3 out
\f2\i0\b0 \cf0 .print(binom(n - \cf4 1\cf0 , i));\
                        
\f3\i \cf5 //call the binom function, n-1 becuse we start at row 0 and column 0 instead on 1\
                        
\f2\i0 \cf0 System.
\f4\i\b \cf3 out
\f2\i0\b0 \cf0 .print(
\f1\b \cf6 " "
\f2\b0 \cf0 );\
                        
\f3\i \cf5 //space between numbers\
                    
\f2\i0 \cf0 \}\
                    System.
\f4\i\b \cf3 out
\f2\i0\b0 \cf0 .println(
\f1\b \cf6 ""
\f2\b0 \cf0 );\
                    
\f1\b \cf2 if 
\f2\b0 \cf0 (!
\f1\b \cf3 direction
\f2\b0 \cf0 ) \{\
                        printPascal(n - \cf4 1\cf0 );\
                    \}\
                \}\
\
            \} 
\f1\b \cf2 else 
\f2\b0 \cf0 \{\
                System.
\f4\i\b \cf3 out
\f2\i0\b0 \cf0 .println(
\f1\b \cf6 "parameter out of bounds"
\f2\b0 \cf0 );\
            \}\
        \}\
\
\
            
\f1\b \cf2 public int 
\f2\b0 \cf0 binom (
\f1\b \cf2 int 
\f2\b0 \cf0 n, 
\f1\b \cf2 int 
\f2\b0 \cf0 k) \{\
            
\f1\b \cf2 if
\f2\b0 \cf0 (sanity_check(n,k)) \{\
                
\f1\b \cf2 int 
\f2\b0 \cf0 v;\
                
\f1\b \cf2 if 
\f2\b0 \cf0 (
\f1\b \cf3 array
\f2\b0 \cf0 [n][k] != \cf4 0\cf0 ) \{\
                    v = 
\f1\b \cf3 array
\f2\b0 \cf0 [n][k];\
                \} 
\f1\b \cf2 else 
\f2\b0 \cf0 \{\
                    
\f1\b \cf2 if 
\f2\b0 \cf0 (n == \cf4 0\cf0 ) \{\
                        v = \cf4 1\cf0 ;\
                    \}\
                    
\f3\i \cf5 // first row\
                    
\f1\i0\b \cf2 else if 
\f2\b0 \cf0 (n == \cf4 1\cf0 ) \{\
                        v = \cf4 1\cf0 ;\
                    \}\
                    
\f3\i \cf5 // second row\
                    
\f1\i0\b \cf2 else if 
\f2\b0 \cf0 (k == \cf4 0\cf0 ) \{\
                        v = \cf4 1\cf0 ;\
                    \}\
                    
\f3\i \cf5 // first column always one\
                    
\f1\i0\b \cf2 else if 
\f2\b0 \cf0 (k == n) \{\
                        v = \cf4 1\cf0 ;\
                    \}\
                    
\f3\i \cf5 // last column always one\
\
                    
\f1\i0\b \cf2 else if 
\f2\b0 \cf0 (k > (n / \cf4 2\cf0 )) \{\
\
                        v = binom(n, n - k);\
                    \} 
\f1\b \cf2 else 
\f2\b0 \cf0 \{\
                        v = binom(n - \cf4 1\cf0 , k - \cf4 1\cf0 ) + binom(n - \cf4 1\cf0 , k);\
                    \}\
                    
\f3\i \cf5 // recursive function\
                
\f2\i0 \cf0 \}\
                
\f1\b \cf3 array
\f2\b0 \cf0 [n][k] = v;\
                
\f1\b \cf2 return 
\f2\b0 \cf0 v;\
            \}\
\
            
\f1\b \cf2 else
\f2\b0 \cf0 \{\
                
\f1\b \cf2 return 
\f2\b0 \cf0 -\cf4 1\cf0 ;\
            \}\
        \}\
    \}\
\
\
\
\
\
\
}