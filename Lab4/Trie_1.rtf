{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-BoldItalic;
\f3\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue109;\red82\green0\blue103;\red0\green0\blue254;
\red15\green112\blue3;\red109\green109\blue109;\red11\green93\blue177;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c42745;\csgenericrgb\c32157\c0\c40392;\csgenericrgb\c0\c0\c99608;
\csgenericrgb\c5882\c43922\c1176;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c4314\c36471\c69412;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs24 \cf2 import 
\f1\b0 \cf0 java.lang.String;\

\f0\b \cf2 import 
\f1\b0 \cf0 java.util.Map;\
\

\f0\b \cf2 public class 
\f1\b0 \cf0 Trie \{\
\
    
\f0\b \cf2 private int \cf3 size
\f1\b0 \cf0 ;\
    
\f0\b \cf2 private 
\f1\b0 \cf0 Node 
\f0\b \cf3 root
\f1\b0 \cf0 ;\
    
\f0\b \cf2 private int \cf3 R 
\f1\b0 \cf0 = \cf4 26\cf0 ;\
\
\
    
\f0\b \cf2 public class 
\f1\b0 \cf0 Node \{\
        
\f0\b \cf2 public 
\f1\b0 \cf0 Node[] 
\f0\b \cf3 next 
\f1\b0 \cf0 = 
\f0\b \cf2 new 
\f1\b0 \cf0 Node[
\f0\b \cf3 R
\f1\b0 \cf0 ];\
        
\f0\b \cf2 public 
\f1\b0 \cf0 Node 
\f0\b \cf3 parent
\f1\b0 \cf0 ;\
        String 
\f0\b \cf3 key
\f1\b0 \cf0 ;\
        
\f0\b \cf2 public int \cf3 value
\f1\b0 \cf0 ;\
        
\f0\b \cf2 public int \cf3 instances
\f1\b0 \cf0 ;\
    \}\
\
\
    
\f0\b \cf2 public void 
\f1\b0 \cf0 PrintNodeValue(Node n) \{\
        System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(
\f0\b \cf5 "Value of node is: " 
\f1\b0 \cf0 + n.
\f0\b \cf3 value
\f1\b0 \cf0 );\
    \}\
\
    
\f0\b \cf2 public int 
\f1\b0 \cf0 charToIndex(
\f0\b \cf2 char 
\f1\b0 \cf0 c) \{ 
\f0\b \cf2 return 
\f1\b0 \cf0 c-
\f0\b \cf5 'a'
\f1\b0 \cf0 ; \}\
\
\
\
\
    
\f0\b \cf2 public void 
\f1\b0 \cf0 Put(String key) \{\
        
\f0\b \cf3 root 
\f1\b0 \cf0 = Put(
\f0\b \cf3 root
\f1\b0 \cf0 , key, \cf4 0\cf0 , 
\f0\b \cf3 root
\f1\b0 \cf0 );\
    \}\
\
    
\f0\b \cf2 private 
\f1\b0 \cf0 Node Put(Node n, String key, 
\f0\b \cf2 int 
\f1\b0 \cf0 level, Node parent) \{\
\
        
\f0\b \cf2 if
\f1\b0 \cf0 (n == 
\f0\b \cf2 null
\f1\b0 \cf0 ) \{\
            n = 
\f0\b \cf2 new 
\f1\b0 \cf0 Node();\
            
\f0\b \cf2 if 
\f1\b0 \cf0 (level != \cf4 0\cf0 ) \{n.
\f0\b \cf3 value 
\f1\b0 \cf0 = \cf4 0\cf0 ;\}\
            n.
\f0\b \cf3 parent 
\f1\b0 \cf0 = parent;\
            n.
\f0\b \cf3 key 
\f1\b0 \cf0 = key.substring(\cf4 0\cf0 , level);\
        \}\
\
        n.
\f0\b \cf3 instances 
\f1\b0 \cf0 += \cf4 1\cf0 ;\
        
\f0\b \cf2 if
\f1\b0 \cf0 ( level == key.length()) \{\
            n.
\f0\b \cf3 value 
\f1\b0 \cf0 += \cf4 1\cf0 ;\
            
\f0\b \cf2 return 
\f1\b0 \cf0 n;\
        \}\
        
\f0\b \cf2 char 
\f1\b0 \cf0 c = key.charAt(level);\
        n.
\f0\b \cf3 next
\f1\b0 \cf0 [charToIndex(c)] = Put(n.
\f0\b \cf3 next
\f1\b0 \cf0 [charToIndex(c)], key, level+\cf4 1\cf0 , n);\
        
\f0\b \cf2 return 
\f1\b0 \cf0 n;\
    \}\
\
\
\
    
\f0\b \cf2 public int 
\f1\b0 \cf0 Get(String key) \{\
        
\f0\b \cf2 int 
\f1\b0 \cf0 get = Get(
\f0\b \cf3 root
\f1\b0 \cf0 , key, \cf4 0\cf0 );\
        System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(get);\
        
\f0\b \cf2 return 
\f1\b0 \cf0 get;\
    \}\
\
    
\f0\b \cf2 private int 
\f1\b0 \cf0 Get(Node n, String key, 
\f0\b \cf2 int 
\f1\b0 \cf0 level) \{\
        
\f0\b \cf2 int 
\f1\b0 \cf0 value = \cf4 0\cf0 ;\
        
\f0\b \cf2 if
\f1\b0 \cf0 (n == 
\f0\b \cf2 null
\f1\b0 \cf0 ) \{ 
\f0\b \cf2 return 
\f1\b0 \cf4 0\cf0 ;\}\
        
\f0\b \cf2 if
\f1\b0 \cf0 (level == key.length()) \{ 
\f0\b \cf2 return 
\f1\b0 \cf0 n.
\f0\b \cf3 value
\f1\b0 \cf0 ;\}\
        
\f0\b \cf2 else 
\f1\b0 \cf0 \{\
            
\f0\b \cf2 char 
\f1\b0 \cf0 c = key.charAt(level);\
            value = Get(n.
\f0\b \cf3 next
\f1\b0 \cf0 [charToIndex(c)], key, ++level);\
            
\f0\b \cf2 return 
\f1\b0 \cf0 value;\
        \}\
    \}\
\
\
\
    
\f0\b \cf2 public 
\f1\b0 \cf0 Node GetNode(String key) \{\
        Node n = GetNode(
\f0\b \cf3 root
\f1\b0 \cf0 , key, \cf4 0\cf0 );\
        
\f3\i \cf6 //if(n != null)\{PrintNodeValue(n);\}\
        //else\{System.out.println("Node does not exist!");\}\
        
\f0\i0\b \cf2 return 
\f1\b0 \cf0 n;\
    \}\
\
    
\f0\b \cf2 private 
\f1\b0 \cf0 Node GetNode(Node n, String key, 
\f0\b \cf2 int 
\f1\b0 \cf0 level) \{\
\
        
\f0\b \cf2 if
\f1\b0 \cf0 (n == 
\f0\b \cf2 null
\f1\b0 \cf0 ) \{ 
\f0\b \cf2 return null
\f1\b0 \cf0 ;\}\
        
\f0\b \cf2 if
\f1\b0 \cf0 (level == key.length()) \{
\f0\b \cf2 return 
\f1\b0 \cf0 n;\}\
        
\f0\b \cf2 char 
\f1\b0 \cf0 c = key.charAt(level);\
        
\f0\b \cf2 return 
\f1\b0 \cf0 GetNode(n.
\f0\b \cf3 next
\f1\b0 \cf0 [charToIndex(c)], key, ++level);\
    \}\
\
\
\
    
\f0\b \cf2 public int 
\f1\b0 \cf0 Count(String key) \{\
        
\f0\b \cf2 int 
\f1\b0 \cf0 count = Count(GetNode(key));\
        System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(count);\
        
\f0\b \cf2 return 
\f1\b0 \cf0 count;\
    \}\
\
    
\f0\b \cf2 private int 
\f1\b0 \cf0 Count(Node n) \{\
\
        
\f0\b \cf2 int 
\f1\b0 \cf0 count = \cf4 0\cf0 ;\
        
\f0\b \cf2 if 
\f1\b0 \cf0 (n == 
\f0\b \cf2 null
\f1\b0 \cf0 ) \{
\f0\b \cf2 return 
\f1\b0 \cf4 0\cf0 ;\}\
        count += n.
\f0\b \cf3 value
\f1\b0 \cf0 ;\
        
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 char 
\f1\b0 \cf0 c = \cf4 0\cf0 ; c < 
\f0\b \cf3 R
\f1\b0 \cf0 ; c++) \{\
            count += Count(n.
\f0\b \cf3 next
\f1\b0 \cf0 [c]);\
        \}\
        
\f0\b \cf2 return 
\f1\b0 \cf0 count;\
    \}\
\
\
    
\f0\b \cf2 public int 
\f1\b0 \cf0 Distinct(String key) \{\
        
\f0\b \cf2 int 
\f1\b0 \cf0 distinct = Distinct(GetNode(key));\
        System.
\f2\i\b \cf3 out
\f1\i0\b0 \cf0 .println(distinct);\
        
\f0\b \cf2 return 
\f1\b0 \cf0 distinct;\
    \}\
\
    
\f0\b \cf2 private int 
\f1\b0 \cf0 Distinct(Node n) \{\
        
\f0\b \cf2 int 
\f1\b0 \cf0 distinct = \cf4 0\cf0 ;\
        
\f0\b \cf2 if 
\f1\b0 \cf0 (n == 
\f0\b \cf2 null
\f1\b0 \cf0 ) \{
\f0\b \cf2 return 
\f1\b0 \cf4 0\cf0 ;\}\
        
\f0\b \cf2 if 
\f1\b0 \cf0 (n.
\f0\b \cf3 value 
\f1\b0 \cf0 != \cf4 0\cf0 )\{\
            distinct += \cf4 1\cf0 ;\
        \}\
        
\f0\b \cf2 for
\f1\b0 \cf0 (
\f0\b \cf2 char 
\f1\b0 \cf0 c = \cf4 0\cf0 ; c < 
\f0\b \cf3 R
\f1\b0 \cf0 ; c++) \{\
            distinct += Distinct(n.
\f0\b \cf3 next
\f1\b0 \cf0 [c]);\
        \}\
        
\f0\b \cf2 return 
\f1\b0 \cf0 distinct;\
    \}\
\
\
\
    
\f0\b \cf2 private class 
\f1\b0 \cf0 TrieEntry 
\f0\b \cf2 implements 
\f1\b0 \cf0 Map.Entry<String, Integer> \{\
\
        
\f0\b \cf2 private final 
\f1\b0 \cf0 String 
\f0\b \cf3 key
\f1\b0 \cf0 ;\
        
\f0\b \cf2 private 
\f1\b0 \cf0 Integer 
\f0\b \cf3 value
\f1\b0 \cf0 ;\
\
\
        
\f0\b \cf2 public 
\f1\b0 \cf0 TrieEntry(String key, Integer value ) \{\
            
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 key 
\f1\b0 \cf0 = key;\
            
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 value 
\f1\b0 \cf0 = value;\
        \}\
\
        
\f0\b \cf2 public 
\f1\b0 \cf0 String getKey() \{\
            
\f0\b \cf2 return this
\f1\b0 \cf0 .
\f0\b \cf3 key
\f1\b0 \cf0 ;\
        \}\
\
        
\f0\b \cf2 public 
\f1\b0 \cf0 Integer getValue() \{\
            
\f0\b \cf2 return this
\f1\b0 \cf0 .
\f0\b \cf3 value
\f1\b0 \cf0 ;\
        \}\
\
\
        
\f0\b \cf2 public 
\f1\b0 \cf0 Integer setValue(Integer value) \{\
            
\f0\b \cf2 int 
\f1\b0 \cf0 old = 
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 value
\f1\b0 \cf0 ;\
            
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 value 
\f1\b0 \cf0 = value;\
            
\f0\b \cf2 return 
\f1\b0 \cf0 old;\
        \}\
    \}\
\
\
\
    
\f0\b \cf2 class 
\f1\b0 \cf0 TrieIterator 
\f0\b \cf2 implements 
\f1\b0 \cf0 java.util.Iterator<java.util.Map.Entry<String, Integer>> \{\
        String 
\f0\b \cf3 key
\f1\b0 \cf0 ;\
        Node 
\f0\b \cf3 nextNode
\f1\b0 \cf0 ;\
        Node 
\f0\b \cf3 currentRoot
\f1\b0 \cf0 ;\
\
        
\f0\b \cf2 public 
\f1\b0 \cf0 TrieIterator(String key) \{\
            
\f0\b \cf3 currentRoot 
\f1\b0 \cf0 = GetNode(key);\
            
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 key 
\f1\b0 \cf0 = key;\
\
            
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 nextNode 
\f1\b0 \cf0 = 
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 currentRoot
\f1\b0 \cf0 ;\
            
\f0\b \cf2 while
\f1\b0 \cf0 (
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 nextNode
\f1\b0 \cf0 .
\f0\b \cf3 value 
\f1\b0 \cf0 == \cf4 0\cf0 ) \{\
                
\f0\b \cf2 for
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf4 0\cf0 ; i < 
\f0\b \cf3 R
\f1\b0 \cf0 ; i++)  \{\
                    
\f0\b \cf2 if 
\f1\b0 \cf0 (
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 nextNode
\f1\b0 \cf0 .
\f0\b \cf3 next
\f1\b0 \cf0 [i] != 
\f0\b \cf2 null
\f1\b0 \cf0 ) \{\
                        
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 nextNode 
\f1\b0 \cf0 = 
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 nextNode
\f1\b0 \cf0 .
\f0\b \cf3 next
\f1\b0 \cf0 [i];\
                    \}\
                \}\
            \}\
        \}\
\
        
\f0\b \cf2 public void 
\f1\b0 \cf0 remove() \{ \}\
\
        
\f0\b \cf2 public boolean 
\f1\b0 \cf0 hasNext() \{\
            
\f0\b \cf2 return \cf3 nextNode 
\f1\b0 \cf0 != 
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 currentRoot
\f1\b0 \cf0 ;\
        \} 
\f3\i \cf6 // 
\f2\b \cf7 TODO: Change root\
\
        
\f0\i0 \cf2 public 
\f1\b0 \cf0 Map.Entry<String, Integer> next() \{\
\
            Node oldNode = 
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 nextNode
\f1\b0 \cf0 ;\
            
\f3\i \cf6 //get index of oldNode\
            
\f0\i0\b \cf2 int 
\f1\b0 \cf0 currentIndex = charToIndex(
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 nextNode
\f1\b0 \cf0 .
\f0\b \cf3 key
\f1\b0 \cf0 .charAt(
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 nextNode
\f1\b0 \cf0 .
\f0\b \cf3 key
\f1\b0 \cf0 .length()-\cf4 1\cf0 ));\
            
\f0\b \cf2 boolean 
\f1\b0 \cf0 rising = 
\f0\b \cf2 true
\f1\b0 \cf0 ;\
\
            
\f0\b \cf2 while
\f1\b0 \cf0 (rising && hasNext()) \{\
\
                currentIndex = charToIndex(
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 nextNode
\f1\b0 \cf0 .
\f0\b \cf3 key
\f1\b0 \cf0 .charAt(
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 nextNode
\f1\b0 \cf0 .
\f0\b \cf3 key
\f1\b0 \cf0 .length()-\cf4 1\cf0 ));\
                
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 nextNode 
\f1\b0 \cf0 = 
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 nextNode
\f1\b0 \cf0 .
\f0\b \cf3 parent
\f1\b0 \cf0 ;\
\
                
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = currentIndex + \cf4 1\cf0 ; i < 
\f0\b \cf3 R
\f1\b0 \cf0 ; i++) \{\
                    
\f0\b \cf2 if 
\f1\b0 \cf0 (
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 nextNode
\f1\b0 \cf0 .
\f0\b \cf3 next
\f1\b0 \cf0 [i] != 
\f0\b \cf2 null
\f1\b0 \cf0 ) \{\
                        rising = 
\f0\b \cf2 false
\f1\b0 \cf0 ;\
                        
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 nextNode 
\f1\b0 \cf0 = 
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 nextNode
\f1\b0 \cf0 .
\f0\b \cf3 next
\f1\b0 \cf0 [i];\
                        i = -\cf4 1\cf0 ;\
                    \}\
                \}\
\
                
\f0\b \cf2 if 
\f1\b0 \cf0 (rising && 
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 nextNode
\f1\b0 \cf0 .
\f0\b \cf3 value 
\f1\b0 \cf0 > \cf4 0\cf0 ) \{\
                    rising = 
\f0\b \cf2 false
\f1\b0 \cf0 ;\
                \}\
            \}\
            
\f3\i \cf6 // Return\
            
\f0\i0\b \cf2 return new 
\f1\b0 \cf0 TrieEntry(oldNode.
\f0\b \cf3 key
\f1\b0 \cf0 , oldNode.
\f0\b \cf3 value
\f1\b0 \cf0 );\
        \}\
    \}\
\
\
    
\f0\b \cf2 public 
\f1\b0 \cf0 java.util.Iterator<java.util.Map.Entry<String, Integer>> GetIterator(String key) \{\
\
        
\f0\b \cf2 return new 
\f1\b0 \cf0 TrieIterator(key);\
    \}\
\
\
\
\
\
\}\
\
\
\
}